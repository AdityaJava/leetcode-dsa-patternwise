===========================
 Two Pointers Technique
===========================

When to Use:
- Problems where the array/list is sorted (or can be sorted) and you need to find:
  â€¢ A pair or triplet with some condition (like sum = target).
  â€¢ Indexes moving toward each other (e.g., left â†’ right, right â†’ left).
  â€¢ Problems involving removal, partition, merging.
  â€¢ Problems where you can reduce the search space by moving pointers smartly instead of brute force checking all pairs.

Common Problem Types:
1) Pair Sum Problems
   Example: "Find if there exists a pair whose sum = target in a sorted array."
   Idea: Start with left = 0 and right = n-1. Move pointers based on sum.

2) Sorted Array Merging
   Example: Merge two sorted arrays.
   Use two pointers, one for each array, and pick smaller elements.

3) Removing Duplicates / Partitioning
   Example: Remove duplicates from sorted array (Leetcode 26).
   Maintain two pointers: one for slow insert position, one for traversal.

4) Palindrome Checking
   Example: Check if a string is palindrome.
   Compare left and right, move toward center.


===========================
 Sliding Window Technique
===========================

When to Use:
- Problems where you need to consider subarrays/substrings (continuous segments).
- Youâ€™re asked about:
  â€¢ Maximum / Minimum sum of a subarray of size K.
  â€¢ Longest/Shortest substring with some property (e.g., no repeating characters, at most K distinct).
  â€¢ Dynamic constraints where window grows/shrinks.

Common Problem Types:
1) Fixed Window Size
   Example: "Find maximum sum of any subarray of size K."
   Use a sliding window of size K â†’ move right pointer, drop left pointer.

2) Variable Window Size (Shrink/Grow)
   Example: "Find the longest substring without repeating characters."
   Expand right until invalid, shrink left until valid, track max.

3) Counting Problems
   Example: "Find count of substrings with at most K distinct characters."
   Expand and shrink dynamically.


===========================
 How to Recognize
===========================

ðŸ‘‰ Ask yourself:
- Am I working with pairs/triplets and sorted input?
  â†’ Use Two Pointers.

- Am I asked about subarrays/substrings (continuous segment)?
  â†’ Use Sliding Window.

- Does window need to grow/shrink dynamically based on a condition?
  â†’ Sliding Window (variable size).

- Do I just need to fix a window of size K?
  â†’ Sliding Window (fixed size).

- Do I only care about 2 indices moving toward each other?
  â†’ Two Pointers.


===========================
 Summary Table
===========================

Pattern                   | Use Whenâ€¦                                    | Example Problem
---------------------------------------------------------------------------------------------------
Two Pointers              | Sorted arrays/strings, pair/triplet search,  | Pair sum in sorted array,
                          | merging, partitioning                        | palindrome check
---------------------------------------------------------------------------------------------------
Sliding Window (Fixed)    | Subarray/substring of size K                 | Max sum subarray of size K
---------------------------------------------------------------------------------------------------
Sliding Window (Variable) | Longest/shortest substring with condition    | Longest substring without
                          |                                              | repeating characters
