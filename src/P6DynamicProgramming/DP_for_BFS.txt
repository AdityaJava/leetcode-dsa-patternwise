DP Beyond Just Storing Min/Max/Sums – A Deep Dive 🚀

✅ What We Commonly Think:
"DP is used to store values like:
- Minimum number of coins
- Maximum profit
- Longest subsequence
- Number of ways to reach a goal"

While this is true, it's only PART of what DP can do.

💡 The Real Power of DP (especially in BFS/DFS-based problems):

✅ 1. Avoid Recomputing:
If we’ve already computed a value (e.g. dp[12] = 3), we should not compute it again.
→ This saves unnecessary work.
-> This is like visiting a node in BFS/DFS only once.

✅ 2. Prune the Search Space:
We avoid exploring a path if it can’t lead to a better result.
→ In BFS, this is like marking a node visited.
→ For example: `if (dp[next] > level)` → Only visit if it's a better path.

✅ 3. Accelerate Search (BFS/DFS):
Without DP or visited set, BFS may re-visit the same sum many times, leading to a large and unnecessary tree.

🎯 Analogy: Searching a city for a restaurant

- ❌ Without DP:
  You might re-check the same buildings again and again.

- ✅ With DP:
  You mark buildings you’ve already checked with how long it took.
  Then, you never revisit a building unless you know a faster way exists.

💬 Conclusion:
DP is not just a table for sums or mins.
👉 It's a smart memory that:
   - avoids rework
   - prevents wrong turns
   - makes brute-force solutions efficient.
